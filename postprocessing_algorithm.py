# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Prepare CoolParksTool
                                 A QGIS plugin
 This plugin prepare data for the CoolParksTool
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-07-06
        copyright            : (C) 2023 by Jérémy Bernard / University of Gothenburg
        email                : jeremy.bernard@zaclys.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Jérémy Bernard'
__date__ = '2023-07-06'
__copyright__ = '(C) 2023 by Jérémy Bernard'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterField,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterMatrix,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterString,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterBoolean,
                       QgsRasterLayer,
                       QgsVectorLayer,
                       QgsProject,
                       QgsProcessingContext,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterFile,
                       QgsProcessingException,
                       QgsLayerTreeGroup)
from qgis.PyQt.QtWidgets import QMessageBox

from pathlib import Path
import pandas as pd
import geopandas as gpd
from qgis.PyQt.QtGui import QIcon
import inspect
import unidecode
import processing

from .functions.coolparks_postprocess import loadCoolParksRaster
from .functions import mainCalculations
from .functions.globalVariables import *
from .functions import WriteMetadata


class CoolParksAnalyzerAlgorithm(QgsProcessingAlgorithm):
    """
    
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    # Input variables
    SCENARIO_REF_DIRECTORY = "SCENARIO_REF_DIRECTORY"
    SCENARIO_ALT_DIRECTORY = "SCENARIO_ALT_DIRECTORY"
    CHANGES = "CHANGES"
    OUTPUT_DIRECTORY = "OUTPUT_DIRECTORY"
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        # We add the input parameters
        # First the layers used as input and output
        self.addParameter(
            QgsProcessingParameterFile(
                self.SCENARIO_REF_DIRECTORY,
                self.tr('Directory of the reference scenario'),
                behavior=QgsProcessingParameterFile.Folder))
        self.addParameter(
            QgsProcessingParameterFile(
                self.SCENARIO_ALT_DIRECTORY,
                self.tr('Directory of the alternative scenario'),
                behavior=QgsProcessingParameterFile.Folder))
        self.addParameter(
           QgsProcessingParameterEnum(
               self.CHANGES, 
               self.tr('What is the change between alternative and reference scenario ?'),
               LIST_OF_CHANGES.values,
               defaultValue=None,
               optional = False))
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                self.OUTPUT_DIRECTORY,
                self.tr('Directory to save the outputs')))
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        refScenarioDirectory = self.parameterAsString(parameters, self.SCENARIO_REF_DIRECTORY, context)
        altScenarioDirectory = self.parameterAsString(parameters, self.SCENARIO_ALT_DIRECTORY, context)
        changes = self.parameterAsString(parameters, self.CHANGES, context)
        changes_string = LIST_OF_CHANGES[int(changes)]
        outputDirectory = self.parameterAsString(parameters, self.OUTPUT_DIRECTORY, context)
        
        # Test the reference and alternative scenario directory combinations
        # First test that they are results directories
        if not os.path.exists(refScenarioDirectory + os.sep + BUILD_INDEP_VAR + ".geojson"):
            raise QgsProcessingException(f'The reference scenario does not contain any results')
        if not os.path.exists(altScenarioDirectory + os.sep + BUILD_INDEP_VAR + ".geojson"):
            raise QgsProcessingException(f'The alternative scenario does not contain any results')
        if refScenarioDirectory == altScenarioDirectory:
            raise QgsProcessingException(f'You are proposing to compare the same scenarios...')
        if changes_string == "weather":
            if (Path(refScenarioDirectory).parent != Path(altScenarioDirectory).parent):
                raise QgsProcessingException(f'The alternative and reference scenarios should have been saved in the same scenario folder')
        else:
            extent_ref = processing.run("native:polygonfromlayerextent",
                                        {'INPUT':refScenarioDirectory + os.sep + BUILD_INDEP_VAR + ".geojson",
                                         'ROUND_TO':0,
                                         'OUTPUT':'TEMPORARY_OUTPUT'})["OUTPUT"]
            extent_alt = processing.run("native:polygonfromlayerextent",
                                        {'INPUT':altScenarioDirectory + os.sep + BUILD_INDEP_VAR + ".geojson",
                                         'ROUND_TO':0,
                                         'OUTPUT':'TEMPORARY_OUTPUT'})["OUTPUT"]            
            tempo_overlap = os.path.join(TEMPO_DIRECTORY, "overlap.geojson")
            overlap = processing.run("native:calculatevectoroverlaps",
                                     {'INPUT':extent_ref,'LAYERS':[extent_alt],
                                      'OUTPUT':tempo_overlap,
                                      'GRID_SIZE':None})["OUTPUT"]
            if gpd.read_file(tempo_overlap).loc[0, "Extent_pc"] < 50:
                raise QgsProcessingException(f'Reference and alternative scenario are not located in the same area')
        


        # if feedback:
        #     feedback.setProgressText("Writing settings for this model run to specified output folder (Filename: RunInfoURock_YYYY_DOY_HHMM.txt)")
        # WriteMetadataURock.writeRunInfo(outputDirectory, build_file, heightBuild,
        #                                 veg_file, attenuationVeg, baseHeightVeg, topHeightVeg,
        #                                 z_ref, v_ref, windDirection, profileType,
        #                                 profileFile,
        #                                 meshSize, dz)
        
        # Calculates the difference of effects between the two scenarios
        finalDirectory, dict_build_glob, diff_build_path, diff_deltaT_path,\
            diff_T_path, diff_build_extremums = \
                mainCalculations.compareScenarios(refScenarioDirectory = refScenarioDirectory, 
                                                  altScenarioDirectory = altScenarioDirectory,
                                                  change = changes_string,
                                                  outputDirectory = outputDirectory)
        
        # Use the directory name used for the scenario comparison as a 
        # group in the map layer where to load the results
        group_name = finalDirectory.split(os.sep)[-1]
        # Get the root of the layer tree
        root = QgsProject.instance().layerTreeRoot()
        # Create a new group
        new_group = QgsLayerTreeGroup(group_name)
        # # Add the group to the root of the layer tree
        # root.insertChildNode(0, new_group)
        
        # Calculates the min and max values of the rasters and vectors
        deltaT_min_value = 0
        deltaT_max_value = 0
        T_min_value = 0
        T_max_value = 0
        for tp in [DAY_TIME, NIGHT_TIME]:
            if diff_deltaT_path[tp]:  
                layer_stat = processing.run("native:rasterlayerstatistics", 
                                            {'INPUT':diff_deltaT_path[tp],
                                            'BAND':1,
                                            'OUTPUT_HTML_FILE':'TEMPORARY_OUTPUT'})
                if layer_stat['MIN'] < deltaT_min_value:
                    deltaT_min_value = layer_stat['MIN']
                if layer_stat['MAX'] > deltaT_max_value:
                    deltaT_max_value = layer_stat['MAX']
                    
            if diff_T_path[tp]:  
                layer_stat = processing.run("native:rasterlayerstatistics", 
                                            {'INPUT':diff_T_path[tp],
                                            'BAND':1,
                                            'OUTPUT_HTML_FILE':'TEMPORARY_OUTPUT'})
                if layer_stat['MIN'] < T_min_value:
                    T_min_value = layer_stat['MIN']
                if layer_stat['MAX'] > T_max_value:
                    T_max_value = layer_stat['MAX']                
                    
        # Load the resulting GIS layers into QGIS with a given style
        for tp in [DAY_TIME, NIGHT_TIME]:
            if diff_deltaT_path[tp]:                
                loadCoolParksRaster(filepath = diff_deltaT_path[tp],
                                    specific_scale = True,
                                    subgroup = new_group,
                                    raster_min = deltaT_min_value,
                                    raster_max = deltaT_max_value,
                                    feedback = feedback,
                                    context = context)
            if diff_T_path[tp]:                
                loadCoolParksRaster(filepath = diff_T_path[tp],
                                    specific_scale = False,
                                    subgroup = new_group,
                                    raster_min = T_min_value,
                                    raster_max = T_max_value,
                                    feedback = feedback,
                                    context = context)
        
        # if diff_build_path:
        #     for var in diff_build_extremums:
        #         loadCoolParksVector(filepath = diff_build_path,
        #                             variable = var,
        #                             subgroup = new_group,
        #                             vector_min = diff_build_extremums[var][0],
        #                             vector_max = diff_build_extremums[var][1],
        #                             feedback = feedback,
        #                             context = context)
        
        # Return the output file names
        return {self.OUTPUT_DIRECTORY: finalDirectory,
                'Global building differences': dict_build_glob}


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'coolparkstool_postprocess'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('3. Compare two scenarios')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)
    
    def shortHelpString(self):
        return self.tr('The CoolParksTool prepare plugin can be used to prepare '+\
                       'the spatial data that are used in the CoolParksTool'+
                       ' models'+
        '\n'
        '\n'
        'This tools requires Java. If Java is not installed on your system,'+ 
        'visit www.java.com and install the latest version. Make sure to install correct version '+
        'based on your system architecture (32- or 64-bit).'
        '\n'
        '\n'
        '---------------\n'
        'Full manual available via the <b>Help</b>-button.')

    def helpUrl(self):
        url = "https://github.com/j3r3m1/coolparkstool"
        return url
    
    def icon(self):
        cmd_folder = Path(os.path.split(inspect.getfile(inspect.currentframe()))[0]).parent
        icon = QIcon(str(cmd_folder) + "/icons/urock.png")
        return icon

    def createInstance(self):
        return CoolParksAnalyzerAlgorithm()
